package main

import (
	"fmt"

	"github.com/pancelor/advent-of-code-solutions/2019/computer"
)

type point struct {
	x, y int
}

func test(in []int, p point) {
	for y := p.y - 1; y < p.y+105; y++ {
		for x := p.x - 1; x < p.x+105; x++ {
			if getPos(in, x, y) {
				fmt.Print("#")
			} else {
				fmt.Print(".")
			}
		}
		fmt.Print("\n")
	}
}

func solve(in []int) interface{} {
	p := solveFRD(in)
	// test(in, p)
	return p.x*10000 + p.y
}

func solveFRD(in []int) point {
	Width := 100
	Start := 2017 // found manually by binary search, ish
	for d := Start; true; d++ {
		fmt.Println(d)
		streak := 0
	INNER:
		for i := d; i >= 0; i-- {
			y := i
			x := d - i
			if getPos(in, x, y) {
				streak++
				if streak == Width {
					return point{x: x - (Width - 1), y: y}
				}
			} else {
				if streak > 0 {
					fmt.Println("nope")
					break INNER
				}
			}
		}
	}
	return point{}
}

func getPos(in []int, x int, y int) bool {
	cpu := computer.MakeCPU("sal")
	cpu.SetMemory(in)
	cpu.Run()

	cpu.SendInput(x)
	cpu.SendInput(y)
	return cpu.RecvOutput() == 1
}

func main() {
	answer := solve(input)
	fmt.Printf("answer:\n%v\n", answer)
}

var input []int = []int{
	109, 424, 203, 1, 21101, 11, 0, 0, 1106, 0, 282, 21102, 18, 1, 0, 1105, 1, 259, 1201, 1, 0, 221, 203, 1, 21101, 0, 31, 0, 1105, 1, 282, 21102, 1, 38, 0, 1106, 0, 259, 21001, 23, 0, 2, 22101, 0, 1, 3, 21102, 1, 1, 1, 21101, 57, 0, 0, 1106, 0, 303, 1202, 1, 1, 222, 21002, 221, 1, 3, 20102, 1, 221, 2, 21101, 259, 0, 1, 21102, 1, 80, 0, 1105, 1, 225, 21101, 83, 0, 2, 21101, 91, 0, 0, 1105, 1, 303, 2102, 1, 1, 223, 20102, 1, 222, 4, 21102, 259, 1, 3, 21101, 225, 0, 2, 21101, 225, 0, 1, 21102, 1, 118, 0, 1105, 1, 225, 20102, 1, 222, 3, 21101, 0, 51, 2, 21102, 1, 133, 0, 1105, 1, 303, 21202, 1, -1, 1, 22001, 223, 1, 1, 21102, 1, 148, 0, 1106, 0, 259, 1201, 1, 0, 223, 21002, 221, 1, 4, 21002, 222, 1, 3, 21101, 13, 0, 2, 1001, 132, -2, 224, 1002, 224, 2, 224, 1001, 224, 3, 224, 1002, 132, -1, 132, 1, 224, 132, 224, 21001, 224, 1, 1, 21102, 195, 1, 0, 106, 0, 108, 20207, 1, 223, 2, 21002, 23, 1, 1, 21102, -1, 1, 3, 21101, 0, 214, 0, 1106, 0, 303, 22101, 1, 1, 1, 204, 1, 99, 0, 0, 0, 0, 109, 5, 2102, 1, -4, 249, 21202, -3, 1, 1, 21202, -2, 1, 2, 22102, 1, -1, 3, 21101, 0, 250, 0, 1105, 1, 225, 22102, 1, 1, -4, 109, -5, 2106, 0, 0, 109, 3, 22107, 0, -2, -1, 21202, -1, 2, -1, 21201, -1, -1, -1, 22202, -1, -2, -2, 109, -3, 2106, 0, 0, 109, 3, 21207, -2, 0, -1, 1206, -1, 294, 104, 0, 99, 22101, 0, -2, -2, 109, -3, 2105, 1, 0, 109, 5, 22207, -3, -4, -1, 1206, -1, 346, 22201, -4, -3, -4, 21202, -3, -1, -1, 22201, -4, -1, 2, 21202, 2, -1, -1, 22201, -4, -1, 1, 22101, 0, -2, 3, 21101, 0, 343, 0, 1106, 0, 303, 1105, 1, 415, 22207, -2, -3, -1, 1206, -1, 387, 22201, -3, -2, -3, 21202, -2, -1, -1, 22201, -3, -1, 3, 21202, 3, -1, -1, 22201, -3, -1, 2, 21202, -4, 1, 1, 21102, 384, 1, 0, 1106, 0, 303, 1105, 1, 415, 21202, -4, -1, -4, 22201, -4, -3, -4, 22202, -3, -2, -2, 22202, -2, -4, -4, 22202, -3, -2, -3, 21202, -4, -1, -2, 22201, -3, -2, 1, 22101, 0, 1, -4, 109, -5, 2105, 1, 0,
}
